import json

class Producto:
    def __init__(self, id, nombre, cantidad, precio):
        self.id = id
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def __str__(self):
        return f"ID: {self.id}, Nombre: {self.nombre}, Cantidad: {self.cantidad}, Precio: {self.precio}"

class Inventario:
    def __init__(self):
        self.productos = {}

    def agregar_producto(self, producto):
        if producto.id not in self.productos:
            self.productos[producto.id] = producto
            print("Producto agregado exitosamente.")
        else:
            print("Ya existe un producto con ese ID.")

    def eliminar_producto(self, id):
        if id in self.productos:
            del self.productos[id]
            print("Producto eliminado.")
        else:
            print("No se encontró un producto con ese ID.")

    def actualizar_producto(self, id, **kwargs):
        if id in self.productos:
            producto = self.productos[id]
            for key, value in kwargs.items():
                setattr(producto, key, value)
            print("Producto actualizado.")
        else:
            print("No se encontró un producto con ese ID.")

    def buscar_producto(self, nombre):
        resultados = [producto for producto in self.productos.values() if nombre.lower() in producto.nombre.lower()]
        if resultados:
            for producto in resultados:
                print(producto)
        else:
            print("No se encontraron productos con ese nombre.")

    def mostrar_todos_los_productos(self):
        if self.productos:
            for producto in self.productos.values():
                print(producto)
        else:
            print("El inventario está vacío.")

    def guardar_inventario(self, archivo="inventario.json"):
        with open(archivo, 'w') as f:
            json.dump(self.productos, f)
            print("Inventario guardado.")

    def cargar_inventario(self, archivo="inventario.json"):
        try:
            with open(archivo, 'r') as f:
                self.productos = json.load(f)
            print("Inventario cargado.")
        except FileNotFoundError:
            print("Archivo no encontrado.")

def menu():
    inventario = Inventario()
    inventario.cargar_inventario()  # Cargar inventario al iniciar

    while True:
        print("\nMenú:")
        print("1. Agregar producto")
        print("2. Eliminar producto")
        print("3. Actualizar producto")
        print("4. Buscar producto")
        print("5. Mostrar todos los productos")
        print("6. Guardar inventario")
        print("7. Salir")
        opcion = input("Ingrese una opción: ")

        if opcion == '1':
            id = input("Ingrese el ID del producto: ")
            nombre = input("Ingrese el nombre del producto: ")
            cantidad = int(input("Ingrese la cantidad: "))
            precio = float(input("Ingrese el precio: "))
            producto = Producto(id, nombre, cantidad, precio)
            inventario.agregar_producto(producto)
        elif opcion == '2':
            id = input("Ingrese el ID del producto a eliminar: ")
            inventario.eliminar_producto(id)
        elif opcion == '3':
            id = input("Ingrese el ID del producto a actualizar: ")
            cambios = {}
            while True:
                campo = input("Ingrese el campo a actualizar (nombre, cantidad, precio, o 'salir'): ")
                if campo.lower() == 'salir':
                    break
                valor = input(f"Ingrese el nuevo valor para {campo}: ")
                cambios[campo] = valor
            inventario.actualizar_producto(id, **cambios)
        # ... (resto de opciones)
        elif opcion == '7':
            break

if __name__ == "__main__":
    menu()
